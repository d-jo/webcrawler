// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package crawler

import (
	context "context"
	entity "github.com/d-jo/webcrawler/entity"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebCrawlerClient is the client API for WebCrawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebCrawlerClient interface {
	StartCrawling(ctx context.Context, in *entity.StartCommand, opts ...grpc.CallOption) (*entity.GenericResponse, error)
	StopCrawling(ctx context.Context, in *entity.StopCommand, opts ...grpc.CallOption) (*entity.GenericResponse, error)
	List(ctx context.Context, in *entity.ListCommand, opts ...grpc.CallOption) (*entity.ListResponse, error)
}

type webCrawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewWebCrawlerClient(cc grpc.ClientConnInterface) WebCrawlerClient {
	return &webCrawlerClient{cc}
}

func (c *webCrawlerClient) StartCrawling(ctx context.Context, in *entity.StartCommand, opts ...grpc.CallOption) (*entity.GenericResponse, error) {
	out := new(entity.GenericResponse)
	err := c.cc.Invoke(ctx, "/crawler.WebCrawler/StartCrawling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCrawlerClient) StopCrawling(ctx context.Context, in *entity.StopCommand, opts ...grpc.CallOption) (*entity.GenericResponse, error) {
	out := new(entity.GenericResponse)
	err := c.cc.Invoke(ctx, "/crawler.WebCrawler/StopCrawling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCrawlerClient) List(ctx context.Context, in *entity.ListCommand, opts ...grpc.CallOption) (*entity.ListResponse, error) {
	out := new(entity.ListResponse)
	err := c.cc.Invoke(ctx, "/crawler.WebCrawler/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebCrawlerServer is the server API for WebCrawler service.
// All implementations must embed UnimplementedWebCrawlerServer
// for forward compatibility
type WebCrawlerServer interface {
	StartCrawling(context.Context, *entity.StartCommand) (*entity.GenericResponse, error)
	StopCrawling(context.Context, *entity.StopCommand) (*entity.GenericResponse, error)
	List(context.Context, *entity.ListCommand) (*entity.ListResponse, error)
	mustEmbedUnimplementedWebCrawlerServer()
}

// UnimplementedWebCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedWebCrawlerServer struct {
}

func (UnimplementedWebCrawlerServer) StartCrawling(context.Context, *entity.StartCommand) (*entity.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCrawling not implemented")
}
func (UnimplementedWebCrawlerServer) StopCrawling(context.Context, *entity.StopCommand) (*entity.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCrawling not implemented")
}
func (UnimplementedWebCrawlerServer) List(context.Context, *entity.ListCommand) (*entity.ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWebCrawlerServer) mustEmbedUnimplementedWebCrawlerServer() {}

// UnsafeWebCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebCrawlerServer will
// result in compilation errors.
type UnsafeWebCrawlerServer interface {
	mustEmbedUnimplementedWebCrawlerServer()
}

func RegisterWebCrawlerServer(s grpc.ServiceRegistrar, srv WebCrawlerServer) {
	s.RegisterService(&WebCrawler_ServiceDesc, srv)
}

func _WebCrawler_StartCrawling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.StartCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServer).StartCrawling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.WebCrawler/StartCrawling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServer).StartCrawling(ctx, req.(*entity.StartCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCrawler_StopCrawling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.StopCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServer).StopCrawling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.WebCrawler/StopCrawling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServer).StopCrawling(ctx, req.(*entity.StopCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCrawler_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(entity.ListCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.WebCrawler/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServer).List(ctx, req.(*entity.ListCommand))
	}
	return interceptor(ctx, in, info, handler)
}

// WebCrawler_ServiceDesc is the grpc.ServiceDesc for WebCrawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebCrawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.WebCrawler",
	HandlerType: (*WebCrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCrawling",
			Handler:    _WebCrawler_StartCrawling_Handler,
		},
		{
			MethodName: "StopCrawling",
			Handler:    _WebCrawler_StopCrawling_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WebCrawler_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawler.proto",
}
